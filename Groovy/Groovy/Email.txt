pipeline {
    agent {
      label "master"
    }
    
    environment {
        COMPILE_NODE = "Aurix_ECU"
        ECU_NODE = "Aurix_ECU"
        COVERITY_NODE = "Aurix_ECU"
        QAC_NODE = "Aurix_ECU"
	    VECTOR_NODE = "Aurix_ECU"
	    BUILD_MANAGER = 'thangasamy.g@lnttechservices.com'
        PROJECT_TECH_LEAD = 'thangasamy.g@lnttechservices.com'
        PLASTIC_PROJECT_NAME = '10031600_MY21_Ford_DAT2_ADAS_HOST'
        COVERITY_PROJECT_NAME = '10031600_MY21_Ford_DAT2_ADAS_HOST'
        JIRA_PROJECT_KEY = 'APS'
        END_MODEL = 'P702'
        PLASTIC_SERVER = 'plasticscm_prod1.delphiauto.net:8087'
        PLASTIC_MAIN = "Aurix_CI_StageD_A4_test"
        PLASTIC_WORKSPACE = "${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"
       
    	
        COMPILE_PATH = "${PLASTIC_WORKSPACE}\\build_files\\aptiv_specific\\python_scripts"
        LICENCE = "LM_LICENSE_FILE=7582@uskoaa17.usinkok.northamerica.delphiauto.net;7580@kswlic01.delcoelect.com"
        GLOBAL_TOOL_PATH = "PATH=C:\\Python27;C:\\Program Files\\Coverity\\Coverity_8.5\\bin;c:\\perl64\\bin;C:\\Windows\\system32"
        CLOC_PATH = "PATH=C:\\Program Files\\Cloc;C:\\Windows\\System32"
        PLASTIC_PATH = "PATH=C:\\Program Files\\PlasticSCM5\\client;C:\\Windows\\system32"
        COMMON_REPORT_GEN_PATH = "${PLASTIC_WORKSPACE}\\build_files\\aptiv_specific\\dynamic_reports\\${END_MODEL}"
        PYTHON_LIBS_FOLDER = "${PLASTIC_WORKSPACE}\\build_files\\shared\\python_scripts\\as_python_libs"
      
    }
    
    stages {
        stage("GetLatestCode"){
            steps{
                node("${COMPILE_NODE}"){
                    ws(env.WorkspacePath2Use){
                        script{
                            if (fileExists("${PLASTIC_MAIN}\\.plastic\\plastic.workspace")){
                                dir("${PLASTIC_MAIN}"){
                                    withEnv(["${PLASTIC_PATH}"]){
                                    bat "cm unco --all"
                                    }
                                }
                            }
                           cm branch:"${env.DevelopmentBranch}",repository: "${PLASTIC_PROJECT_NAME}", server: "${PLASTIC_SERVER}",useUpdate: true, useMultipleWorkspaces: true, workspaceName: "${PLASTIC_MAIN}"
                        }
		            }
                }
            }
        }

      //stage 1
		stage("Compile Aptiv Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
                                    bat 'python aptiv_host_build.py -jenkins memmap -gen'
									bat 'python aptiv_host_build.py -jenkins build -clib ALL -lib A_APP'
									echo "Stage 1 pass"
									
                                    }
                                }
								withEnv(["${CLOC_PATH}"]) {
                                bat "cloc-1.76.exe  --by-file --include-lang=C,C++,\"C/C++ Header\",Assembly --xml --out=cloc.xml ./build_files/aptiv_specific/output/P702/A_APP ./build_files/aptiv_specific/output/P702/AS_FW ./aptiv_sw/integration/swc/ford_features"
                                sloccountPublish encoding: '', ignoreBuildFailure: true, pattern: 'cloc.xml'
                            }
                            }
                        }
                    }
                }
            }
             //stage 2
        stage("Compile AutoSAR Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
                                     bat 'python aptiv_host_build.py -jenkins build -lib AS_FW'
                                        echo "Stage 2 pass"
                                }
                            }
                 
                        }
                    }
                }
            }
        }
		
		     //stage 3
		stage("Compile Template Libraries"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
                                     bat 'python aptiv_host_build.py -jenkins build -lib V_SWC_T' 
                                    // bat 'python aptiv_host_build.py -jenkins build -lib V_CDD_T'
									 bat 'python aptiv_host_build.py -jenkins build -lib F_SWC_T'
									 echo "Stage 3 pass" 
                                }
                            }
                 
                        }
                    }
                }
            }
        }
		 //stage 4

		stage("Compile Ford Feature Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
									bat 'python aptiv_host_build.py -jenkins -ford_swc_temp -val_temp build -lib FF_AC -capp -app'
									echo "Stage 4 pass"                               }
								}
                 
							}
						}
					}
				}
			}
		}	
		 //stage 5
		stage("Compile Ford Feature Template Library"){
            when {
                equals expected: 0, actual: stage_skip
            }
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

								dir("${COMPILE_PATH}"){
									withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
										bat 'python aptiv_host_build.py -jenkins -val_temp -ff_ac_temp -ford_swc_temp build -lib FF_AC -clib FF_AC -capp -app'
									 }
								}
                            }
                 
                        }
                    }
                }
          //stage 6
		
		stage("Link Full Application"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
						script{
							
							dir("${COMPILE_PATH}") {
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
                                     bat 'python aptiv_host_build.py -jenkins build -capp -app'
									 def jobName = currentBuild.fullDisplayName
									//email notification sendNotification
									emailNotifications = 'thangasamy.g@lnttechservices.com'
									notificationSent    = false
									def sendNotification(buildChanged)
										{
											if (notificationSent)
											{
												return
											}
											notificationSent = true

											if (currentBuild.currentResult == 'SUCCESS')
											{
												// notify users when the build is back to normal
												mail to: emailNotifications,
													subject: "Build fixed: ${currentBuild.fullDisplayName}",
													body: "The build is back to normal ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE') && buildChanged)
											{
												// notify users when the Pipeline first fails
												mail to: emailNotifications,
													subject: "Build failed: ${currentBuild.fullDisplayName}",
													body: "Something went wrong with ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE'))
											{
												// notify users when they check into a broken build
												mail to: emailNotifications,
													subject: "Build failed (again): ${currentBuild.fullDisplayName}",
													body: "Something is still wrong with ${env.BUILD_URL}"
											}
										}
								}
							}
                               
								
								
							
							
						}
					}
                }
            }
        }
		 //stage 7
		stage("Link Application with Ford SWC Templates"){
		    steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
        
						
						
							script{
								
								dir("${COMPILE_PATH}"){
									withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
										bat 'python aptiv_host_build.py -jenkins -ford_swc_temp build -capp -app'
										//email notification sendNotification
										emailNotifications = 'thangasamy.g@lnttechservices.com'
										notificationSent    = false
										def sendNotification(buildChanged)
										{
											if (notificationSent)
											{
												return
											}
											notificationSent = true

											if (currentBuild.currentResult == 'SUCCESS')
											{
												// notify users when the build is back to normal
												mail to: emailNotifications,
													subject: "Build fixed: ${currentBuild.fullDisplayName}",
													body: "The build is back to normal ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE') && buildChanged)
											{
												// notify users when the Pipeline first fails
												mail to: emailNotifications,
													subject: "Build failed: ${currentBuild.fullDisplayName}",
													body: "Something went wrong with ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE'))
											{
												// notify users when they check into a broken build
												mail to: emailNotifications,
													subject: "Build failed (again): ${currentBuild.fullDisplayName}",
													body: "Something is still wrong with ${env.BUILD_URL}"
											}
										}
					                }         
								}
								
							}
								
                          
                                
                    }
                }
            }
        }
		 //stage 8
		stage("Link Application with Valeo Templates"){
			when {
				expression {
					return sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim() == "master"
				}
			}
		    steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){

						
							script{
									dir("${COMPILE_PATH}"){
										withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
											bat 'python aptiv_host_build.py -jenkins -val_temp build -capp -app'
									 		//email notification sendNotification
										emailNotifications = 'thangasamy.g@lnttechservices.com'
										notificationSent    = false
										def sendNotification(buildChanged)
										{
											if (notificationSent)
											{
												return
											}
											notificationSent = true

											if (currentBuild.currentResult == 'SUCCESS')
											{
												// notify users when the build is back to normal
												mail to: emailNotifications,
													subject: "Build fixed: ${currentBuild.fullDisplayName}",
													body: "The build is back to normal ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE') && buildChanged)
											{
												// notify users when the Pipeline first fails
												mail to: emailNotifications,
													subject: "Build failed: ${currentBuild.fullDisplayName}",
													body: "Something went wrong with ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE'))
											{
												// notify users when they check into a broken build
												mail to: emailNotifications,
													subject: "Build failed (again): ${currentBuild.fullDisplayName}",
													body: "Something is still wrong with ${env.BUILD_URL}"
											}
										}
									 
									    }
                               
									}
								
								}
								
							}	
                    }
                }
            }
        }
		//Stage 9
		
		stage("Link with Ford and Valeo Templates"){
			when {
				expression {
					return sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim() == "master"
				}
			}
		    steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
						script{
							dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
									bat 'python aptiv_host_build.py -jenkins -val_temp -ford_swc_temp build -capp -app'
									//email notification sendNotification
									emailNotifications = 'thangasamy.g@lnttechservices'
									notificationSent    = false
									def sendNotification(buildChanged)
										{
											if (notificationSent)
											{
												return
											}
											notificationSent = true

											if (currentBuild.currentResult == 'SUCCESS')
											{
												// notify users when the build is back to normal
												mail to: emailNotifications,
													subject: "Build fixed: ${currentBuild.fullDisplayName}",
													body: "The build is back to normal ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE') && buildChanged)
											{
												// notify users when the Pipeline first fails
												mail to: emailNotifications,
													subject: "Build failed: ${currentBuild.fullDisplayName}",
													body: "Something went wrong with ${env.BUILD_URL}"
											}
											else if ((currentBuild.currentResult == 'FAILURE'))
											{
												// notify users when they check into a broken build
												mail to: emailNotifications,
													subject: "Build failed (again): ${currentBuild.fullDisplayName}",
													body: "Something is still wrong with ${env.BUILD_URL}"
											}
										}
									
								}
								
							}
						}		
                    }
                }
            }
        } //stage  9
    }
      
    post{
        always{
            warnings canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'TASKING VX Compiler']], defaultEncoding: '', excludePattern: '.*/FF_AC/.*', healthy: '', includePattern: '', messagesPattern: '', unHealthy: '', usePreviousBuildAsReference: true
        }
        success
		{
			script
			{
				currentBuild.result = "SUCCESS"
				def jobName = currentBuild.fullDisplayName
				emailext body:'''${JELLY_SCRIPT, template="DAT2_thanga.jelly"}''', 
				mimeType: 'text/html', subject: "[Jenkins] Build Successful: ${jobName}",
				to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
				recipientProviders: [developers()]
				
				
			}
        }
		
		unstable{
			script
			{
				def jobName = currentBuild.fullDisplayName
				emailext body:'''${JELLY_SCRIPT, template="DAT2_thanga.jelly"}''',
				mimeType: 'text/html',
				subject: "[Jenkins] Build UNSTABLE NEED ACTION: ${jobName}",
				to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
				recipientProviders: [[$class: 'CulpritsRecipientProvider']]
				
				
			}

        }
		failure{
            script{
                def jobName = currentBuild.fullDisplayName
                emailext body:'''${JELLY_SCRIPT, template="DAT2_thanga.jelly"}''',
                mimeType: 'text/html',
                subject: "[Jenkins] Build FAILURE!: ${jobName}",
                to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
			}
        }
    }
 }