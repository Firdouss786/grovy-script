pipeline {
    agent {
      label "master"
    }
    
    environment {
        COMPILE_NODE = "Aurix_ECU"
        ECU_NODE = "Aurix_ECU"
        COVERITY_NODE = "Aurix_ECU"
        QAC_NODE = "Aurix_ECU"
	    VECTOR_NODE = "Aurix_ECU"
	    BUILD_MANAGER = 'vijaykumar.essam@aptiv.com'
        PROJECT_TECH_LEAD = 'thangasamy.ganesan@aptiv.com'
        PLASTIC_PROJECT_NAME = '10031600_MY21_Ford_DAT2_ADAS_HOST'
        COVERITY_PROJECT_NAME = '10031600_MY21_Ford_DAT2_ADAS_HOST'
        JIRA_PROJECT_KEY = 'APS'
        END_MODEL = 'P702'
        PLASTIC_SERVER = 'plasticscm_prod1.delphiauto.net:8087'
        PLASTIC_MAIN = "Aurix_CI_StageD_A4_test"
        PLASTIC_WORKSPACE = "${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"
       
    	
        COMPILE_PATH = "${PLASTIC_WORKSPACE}\\build_files\\aptiv_specific\\python_scripts"
        LICENCE = "LM_LICENSE_FILE=7582@uskoaa17.usinkok.northamerica.delphiauto.net;7580@kswlic01.delcoelect.com"
        GLOBAL_TOOL_PATH = "PATH=C:\\Python27;C:\\Program Files\\Coverity\\Coverity_8.5\\bin;c:\\perl64\\bin;C:\\Windows\\system32"
        CLOC_PATH = "PATH=C:\\Program Files\\Cloc;C:\\Windows\\System32"
        PLASTIC_PATH = "PATH=C:\\Program Files\\PlasticSCM5\\client;C:\\Windows\\system32"
        COMMON_REPORT_GEN_PATH = "${PLASTIC_WORKSPACE}\\build_files\\aptiv_specific\\dynamic_reports\\${END_MODEL}"
        PYTHON_LIBS_FOLDER = "${PLASTIC_WORKSPACE}\\build_files\\shared\\python_scripts\\as_python_libs"
      
    }
    
    stages {
        stage("GetLatestCode"){
            steps{
                node("${COMPILE_NODE}"){
                    ws(env.WorkspacePath2Use){
                        script{
                            if (fileExists("${PLASTIC_MAIN}\\.plastic\\plastic.workspace")){
                                dir("${PLASTIC_MAIN}"){
                                    withEnv(["${PLASTIC_PATH}"]){
                                    bat "cm unco --all"
                                    }
                                }
                            }
                           cm branch:"${env.DevelopmentBranch}",repository: "${PLASTIC_PROJECT_NAME}", server: "${PLASTIC_SERVER}",useUpdate: true, useMultipleWorkspaces: true, workspaceName: "${PLASTIC_MAIN}"
                        }
		            }
                }
            }
        }

      //stage 1
		stage("Compile Aptiv Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
                                    bat 'python aptiv_host_build.py -jenkins memmap -gen'
									bat 'python aptiv_host_build.py -jenkins build -clib ALL -lib A_APP'
									echo "Stage 1 pass"
									
                                    }
                                }
								withEnv(["${CLOC_PATH}"]) {
                                bat "cloc-1.76.exe  --by-file --include-lang=C,C++,\"C/C++ Header\",Assembly --xml --out=cloc.xml ./build_files/aptiv_specific/output/P702/A_APP ./build_files/aptiv_specific/output/P702/AS_FW ./aptiv_sw/integration/swc/ford_features"
                                sloccountPublish encoding: '', ignoreBuildFailure: true, pattern: 'cloc.xml'
                            }
                            }
                        }
                    }
                }
            }
             //stage 2
        stage("Compile AutoSAR Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
                                     bat 'python aptiv_host_build.py -jenkins build -lib AS_FW'
                                        echo "Stage 2 pass"
                                }
                            }
                 
                        }
                    }
                }
            }
        }
		
		     //stage 3
		stage("Compile Template Libraries"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
                                     bat 'python aptiv_host_build.py -jenkins build -lib V_SWC_T' 
                                    // bat 'python aptiv_host_build.py -jenkins build -lib V_CDD_T'
									 bat 'python aptiv_host_build.py -jenkins build -lib F_SWC_T'
									 echo "Stage 3 pass" 
                                }
                            }
                 
                        }
                    }
                }
            }
        }
		 //stage 4

		stage("Compile Ford Feature Library"){
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

                            dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								try{
                                    bat 'python aptiv_host_build.py -jenkins -ford_swc_temp -val_temp build -lib FF_AC -capp -app'
									echo "Stage 4 pass"
									stage_skip=1
									}
								catch(Exception e)
									{
									  echo "Stage 4 fail"
									  stage_skip=0
									}
                                }
                            }
                 
                        }
                    }
                }
            }
        }
		 //stage 5
		stage("Compile Ford Feature Template Library"){
           
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
                        script{

								if( stage_skip == 0)
								{
								  dir("${COMPILE_PATH}"){
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
								try{
                                    bat 'python aptiv_host_build.py -jenkins -val_temp -ff_ac_temp -ford_swc_temp build -lib FF_AC -clib FF_AC -capp -app'
									 stage_skip = 1
									 echo "Stage 5 pass"
								}catch(Exception e)
								{
									  echo "Stage 5 fail"
									  	stage_skip=0
								}
                               
								}
								
								}
								}
								else
								{
								  echo "Stage 5 Skipp"
								          stage_skip = 0
								//go to next stage skipping this stage 
                          
                                }
								}
                            }
                 
                        }
                    }
                }
          //stage 6
		
		stage("Link Full Application"){
			steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
					
						script{
							
							dir("${COMPILE_PATH}")
							{
                                withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
									try{
										//  bat 'python aptiv_host_build.py -jenkins build -capp -app'
										// stage_skip = 1
										stage_skip = 0
										 env.stage_6 = "Passed with Link Full Application"
										 echo "Stage 6 Passed" 
									}catch(Exception e)
									{
										echo "Stage 6 fail"
										//stage_skip=0
										stage_skip = 1
										
									}
                               
								}
								
							}
							
						}
					}
                }
            }
        }
		
		//stage 7
		stage("Link Application with Ford SWC Templates"){
		    
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
						
						script{
								if( stage_skip == 0)
								{
								  dir("${COMPILE_PATH}"){
										withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
											try{
											//	bat 'python aptiv_host_build.py -jenkins -ford_swc_temp build -capp -app'
													 // stage_skip = 1
													 stage_skip = 0
													 env.stage_7 = "Passed with Link Application with Ford SWC Templates"
													 
											}catch(Exception e)
												{
												  
												  //stage_skip=0
												  stage_skip = 1
												  
												}
                               
								}
										}
								
									}
								else
								{
								echo "Stage 7 else condition"
								 stage_skip = 1
								 
								//go to next stage skipping this stage 
                          
                                }
							}
                    }
                }
            }
        }
		 //stage 8
		stage("Link Application with Valeo Templates"){
		   
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){

						
							script{
							
							
								if( stage_skip == 0)
								{
									dir("${COMPILE_PATH}"){
										withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
											try{
												//	bat 'python aptiv_host_build.py -jenkins -val_temp build -capp -app'
												 //stage_skip = 1
												 stage_skip = 0
												 env.stage_8 = "Passed with Link Application with Valeo Templates"
												 echo "Link Application with Valeo Templates"
												 
											}catch(Exception e)
												  {
													echo "Link Application with Valeo Templates"
													
												  }
                               
								}
										
										}										
									}
								else
								{
								echo "Link Application with Valeo Templates"
								 stage_skip = 1
								 
								//go to next stage skipping this stage 
                          
                                }
							}
                    }
                }
            }
        }
		//Stage 9
		
		stage("Link with Ford and Valeo Templates"){
		    
            steps {
                node("${COMPILE_NODE}") {
                    ws("${env.WorkspacePath2Use}\\${PLASTIC_MAIN}"){
						script{
							
						
							
								if( stage_skip == 0)
								{
									dir("${COMPILE_PATH}"){
										withEnv(["${LICENCE}", "${GLOBAL_TOOL_PATH}"]) {
								
											//try{
												//	bat 'python aptiv_host_build.py -jenkins -val_temp -ford_swc_temp build -capp -app'
													 env.stage_9 = "Passed with Link with Ford and Valeo Templates"
													 
												// stage_skip = 1
												 //
											 // }catch(Exception e)
											 // {
											  //  echo "Stage 9 fail"
											  //	stage_skip=0
											  //}
                               
								}
								
									}
										}
								else
								{
								echo "Link with Ford and Valeo Templates"
								
							    
								
							
                                }
						}
                    }
                }
            }
        } //stage  9

 
    }
      
    post{
        always{
            warnings canResolveRelativePaths: false, categoriesPattern: '', consoleParsers: [[parserName: 'TASKING VX Compiler']], defaultEncoding: '', excludePattern: '.*/FF_AC/.*', healthy: '', includePattern: '', messagesPattern: '', unHealthy: '', usePreviousBuildAsReference: true
        }
        success
		{
			script
			{
				currentBuild.result = "SUCCESS"
				def jobName = currentBuild.fullDisplayName
				emailext body:'''${JELLY_SCRIPT, template="DAT2.0_Test.jelly"}''', 
				mimeType: 'text/html', subject: "[Jenkins] Build Successful: ${jobName}",
				to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
				recipientProviders: [developers()]
				
				
			}
        }
		
		unstable{
			script
			{
				def jobName = currentBuild.fullDisplayName
				emailext body:'''${JELLY_SCRIPT, template="DAT2.0_Test.jelly"}''',
				mimeType: 'text/html',
				subject: "[Jenkins] Build UNSTABLE NEED ACTION: ${jobName}",
				to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
				recipientProviders: [[$class: 'CulpritsRecipientProvider']]
				
				
			}

        }
       failure{
            script{
                def jobName = currentBuild.fullDisplayName
                emailext body:'''${JELLY_SCRIPT, template="DAT2.0_Test.jelly"}''',
                mimeType: 'text/html',
                subject: "[Jenkins] Build FAILURE!: ${jobName}",
                to: "cc:${BUILD_MANAGER}, cc:${PROJECT_TECH_LEAD}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
           }
        }
    }
}